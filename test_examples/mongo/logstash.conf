input {
  stdin {}
}
filter {
  json {
    source => "message"
  }
  grok {
    match => {
      "message" => [
        "%{TIMESTAMP_ISO8601:timestamp} %{WORD:loglevel} %{DATA:conn_type}\s+\[%{DATA:context}\]\s+%{GREEDYDATA:mongo_message} %{NUMBER:querytime_ms}ms%{GREEDYDATA:mongo_message2}",
        "%{TIMESTAMP_ISO8601:timestamp} %{WORD:loglevel} %{DATA:conn_type}\s+\[%{DATA:context}\]\s+%{GREEDYDATA:mongo_message} %{NUMBER:querytime_ms}ms",
        "%{TIMESTAMP_ISO8601:timestamp} %{WORD:loglevel} %{DATA:conn_type}\s+\[%{DATA:context}\]\s+%{GREEDYDATA:mongo_message}",
        "%{TIMESTAMP_ISO8601:timestamp} %{WORD:loglevel}\s+\[%{DATA:context}\]\s+%{GREEDYDATA:mongo_message}"
      ]
    }
  }
  # populate @timestamp with %{timestamp} matched above
  date {
    match => ["timestamp", "ISO8601"]
  }
  # If we matched a second part of text, concat the message
  if [mongo_message2] {
    mutate {
      replace => {
        "mongo_message" => "%{mongo_message}%{mongo_message2}"
      }
    }
  }
  if ![mongo_message] or [mongo_message] == "" {
    mutate {
      replace => {
        "mongo_message" => "%{message}"
      }
    }
  }

  mutate {
    convert => {
      "querytime_ms" => "integer"
    }
    replace => {
      "@message" => "%{mongo_message}"
      # "@timestamp" => "%{timestamp}"
    }
  }

  # just for tests
  mutate {
    replace => {
      "host" => "testing_host"
    }
  }
}
