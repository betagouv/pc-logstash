input {
  stdin {
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2} "
      negate => "true"
      what => "previous"
    }
  }
}
filter {
  grok {
    match => {
      "source" => "/mnt/rss_worker_%{NUMBER:worker_id}"
    }
  }
  grok {
    match => {
      "message" => [
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+%{GREEDYDATA:crawler_message}\s+%{NUMBER:querytime_ms}\s+MS",
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+%{GREEDYDATA:crawler_message}",
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+ID %{NUMBER:document_id} : %{GREEDYDATA:crawler_message} %{URI:url}( %{GREEDYDATA:crawler_message2} %{NUMBER:querytime_ms}\s+MS)?",
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+%{WORD:verb} %{NUMBER:verb_value_int} %{GREEDYDATA:crawler_message} %{URI:url} %{GREEDYDATA:crawler_message2}",
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+%{WORD:verb} %{NUMBER:verb_value_int} %{GREEDYDATA:crawler_message} %{URI:url}",
        "%{DATESTAMP:timestamp} \[%{DATA:context}\] %{LOGLEVEL:loglevel}\s+%{JAVACLASS:javaclass}\s+%{GREEDYDATA:crawler_message}"
      ]
    }
  }
  # If we matched a second part of text, concat the message
  if [crawler_message2] {
    mutate {
      replace => {
        "crawler_message" => "%{crawler_message}%{crawler_message2}"
      }
    }
  }
  if ![crawler_message] or [crawler_message] == "" {
    mutate {
      replace => {
        "crawler_message" => "%{message}"
      }
    }
  }

  mutate {
    convert => {
      "querytime_ms" => "integer"
      "verb_value_int" => "integer"
      "worker_id" => "integer"
    }
    # replace => [ "@message", "%{crawler_message}" ]
  }

  # just for tests
  mutate {
    replace => {
      "host" => "testing_host"
    }
  }
}
